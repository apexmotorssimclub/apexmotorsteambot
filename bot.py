import asyncio
import logging
import signal
import sys
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv
from openai_client import OpenAIClient
from time_parser import parse_event_datetime, format_dt_ru

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
CHANNEL_ID_RAW = os.getenv('TELEGRAM_CHANNEL_ID')  # @channel_username –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π id
ADMIN_IDS_RAW = os.getenv('ADMIN_USER_IDS', '')  # –∑–∞–ø—è—Ç–∞—è: 12345,67890
ADMIN_USERNAMES_RAW = os.getenv('ADMIN_USERNAMES', '')  # –∑–∞–ø—è—Ç–∞—è: user1,user2 (–±–µ–∑ @)
if not BOT_TOKEN:
    raise RuntimeError('TELEGRAM_BOT_TOKEN is not set in .env')

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
openai_client = OpenAIClient()

# –ü—Ä–æ—Å—Ç–µ–π—à–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –≤ –ø–∞–º—è—Ç–∏
SESSIONS: dict[int, dict] = {}
MAX_IMAGES = int(os.getenv('MAX_IMAGES', '3'))

# –†–∞–∑–±–æ—Ä –∞–¥–º–∏–Ω–æ–≤ –∏–∑ .env
def _parse_admin_ids(raw: str) -> set[int]:
    ids = set()
    for part in (raw or '').replace(' ', '').split(','):
        if not part:
            continue
        try:
            ids.add(int(part))
        except Exception:
            pass
    return ids

def _parse_admin_usernames(raw: str) -> set[str]:
    names = set()
    for part in (raw or '').split(','):
        uname = part.strip().lstrip('@').lower()
        if uname:
            names.add(uname)
    return names

ADMIN_IDS = _parse_admin_ids(ADMIN_IDS_RAW)
ADMIN_USERNAMES = _parse_admin_usernames(ADMIN_USERNAMES_RAW)

def is_admin_user(user: types.User) -> bool:
    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –ø—É—Å—Ç ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    if not ADMIN_IDS and not ADMIN_USERNAMES:
        return True
    if user.id in ADMIN_IDS:
        return True
    uname = (user.username or '').lower()
    return uname in ADMIN_USERNAMES

async def guard_message(message: types.Message) -> bool:
    if not is_admin_user(message.from_user):
        await message.answer('‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω')
        return False
    return True

async def guard_callback(callback: types.CallbackQuery) -> bool:
    if not is_admin_user(callback.from_user):
        await callback.answer('‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω', show_alert=True)
        return False
    return True


class PostStates(StatesGroup):
    waiting_for_edit = State()
    waiting_for_media = State()


def get_main_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="regenerate")],
        [InlineKeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit")],
        [InlineKeyboardButton(text="üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –º–µ–¥–∏–∞", callback_data="add_media")],
        [InlineKeyboardButton(text="üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")],
    ])


def get_style_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèÅ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", callback_data="style_classic")],
        [InlineKeyboardButton(text="üòÑ –®—É—Ç–æ—á–Ω—ã–π", callback_data="style_funny")],
        [InlineKeyboardButton(text="üìä –†–µ–ø–æ—Ä—Ç–∞–∂", callback_data="style_report")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_main")],
    ])


def get_media_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="media_done")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")],
    ])


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if not await guard_message(message):
        return
    await message.answer("üèÅ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Äî –æ—Ç–≤–µ—á—É —ç—Ö–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ–º. /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    if not await guard_message(message):
        return
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç ‚Äî —è –ø–æ–≤—Ç–æ—Ä—é –µ–≥–æ. –≠—Ç–æ –®–∞–≥ 1 –∏–∑ 5.")


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –≤–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π (state=None), —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
@dp.message(StateFilter(None), F.text)
async def generate_post(message: types.Message, state: FSMContext):
    if not await guard_message(message):
        return
    await handle_text_to_post(message, state, message.text)


def _detect_verbosity(text: str) -> str:
    # –≠–≤—Ä–∏—Å—Ç–∏–∫–∞: —á–µ–º –¥–ª–∏–Ω–Ω–µ–µ –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç, —Ç–µ–º –¥–ª–∏–Ω–Ω–µ–µ –ø–æ—Å—Ç
    length = len(text or "")
    if length < 160:
        return "short"
    if length < 600:
        return "medium"
    return "long"


async def handle_text_to_post(message: types.Message, state: FSMContext, input_text: str):
    if not input_text:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç.")
        return
    await message.answer("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç‚Ä¶")
    try:
        # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω—ã–µ –¥–∞—Ç—ã –≤–æ –≤—Ö–æ–¥ ‚Äî –ø—É—Å—Ç—å –º–æ–¥–µ–ª—å –Ω–µ –≤—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–∞–π–º—à—Ç–∞–º–ø—ã
        verbosity = _detect_verbosity(input_text)
        post = openai_client.generate_post_from_text(input_text, verbosity=verbosity)
        if not post:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç.")
            return
        SESSIONS[message.from_user.id] = {
            'original_text': input_text,
            'post_text': post,
            'media': [],
        }
        await message.answer(post, reply_markup=get_main_keyboard())
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")


# –§–æ—Ç–æ/–≤–∏–¥–µ–æ –≤–Ω–µ —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É. –ì–æ–ª–æ—Å/–∞—É–¥–∏–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º –Ω–∏–∂–µ.
@dp.message(F.photo | F.video)
async def handle_media_anytime(message: types.Message, state: FSMContext):
    if not await guard_message(message):
        return
    # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –∂–¥—ë–º –º–µ–¥–∏–∞ ‚Äî –ø–µ—Ä–µ–¥–∞—ë–º –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏
    current_state = await state.get_state()
    if current_state == PostStates.waiting_for_media.state:
        await handle_media_upload(message, state)
        return
    # –ò–Ω–∞—á–µ –ø—Ä–æ—Å–∏–º –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É
    await message.answer("–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞ –∫ –ø–æ—Å—Ç—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –º–µ–¥–∏–∞¬ª.")


@dp.message(F.voice | F.audio)
async def handle_voice_to_text(message: types.Message, state: FSMContext):
    if not await guard_message(message):
        return
    # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–¥–∏–∞ ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –º–µ–¥–∏–∞
    current_state = await state.get_state()
    if current_state == PostStates.waiting_for_media.state:
        await handle_media_upload(message, state)
        return

    await message.answer("üéôÔ∏è –†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å‚Ä¶")
    try:
        if message.voice:
            file_id = message.voice.file_id
            file_info = await bot.get_file(file_id)
            file = await bot.download_file(file_info.file_path)
            audio_bytes = file.read()
            text = openai_client.transcribe(audio_bytes, filename="voice.ogg", language="ru")
        else:
            file_id = message.audio.file_id
            file_info = await bot.get_file(file_id)
            file = await bot.download_file(file_info.file_path)
            audio_bytes = file.read()
            # –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞
            text = openai_client.transcribe(audio_bytes, filename=(message.audio.file_name or "audio.mp3"), language="ru")

        if not text:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return

        # –ü—É—Å–∫–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –æ–±—ã—á–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ message
        await handle_text_to_post(message, state, text)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")


@dp.callback_query(lambda c: c.data == 'regenerate')
async def handle_regenerate(callback: types.CallbackQuery):
    if not await guard_callback(callback):
        return
    await callback.message.edit_text("üé® –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å:", reply_markup=get_style_keyboard())


@dp.callback_query(lambda c: c.data.startswith('style_'))
async def handle_style(callback: types.CallbackQuery):
    if not await guard_callback(callback):
        return
    user_id = callback.from_user.id
    sess = SESSIONS.get(user_id)
    if not sess:
        await callback.answer("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return
    style = callback.data.split('_', 1)[1]
    await callback.message.edit_text("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ‚Ä¶")
    text_source = sess.get('original_text') or sess.get('post_text', '')
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª–∏–Ω—É –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –µ—Å—Ç—å; –∏–Ω–∞—á–µ ‚Äî –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Å—Ç–∞
    seed_text = sess.get('original_text') or text_source
    verbosity = _detect_verbosity(seed_text)
    new_post = openai_client.generate_post_in_style(text_source, style, verbosity=verbosity)
    sess['post_text'] = new_post
    await callback.message.edit_text(new_post, reply_markup=get_main_keyboard())


@dp.callback_query(lambda c: c.data == 'edit')
async def handle_edit(callback: types.CallbackQuery, state: FSMContext):
    if not await guard_callback(callback):
        return
    await state.set_state(PostStates.waiting_for_edit)
    user_id = callback.from_user.id
    sess = SESSIONS.get(user_id)
    current_text = (sess or {}).get('post_text', '–¢–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.')
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –±—ã–ª–æ —É–¥–æ–±–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    await callback.message.answer("–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:")
    await callback.message.answer(current_text)
    await callback.message.answer("‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:")


@dp.message(PostStates.waiting_for_edit)
async def handle_edit_text(message: types.Message, state: FSMContext):
    if not await guard_message(message):
        return
    user_id = message.from_user.id
    sess = SESSIONS.get(user_id)
    if not sess:
        await state.clear()
        await message.answer("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–Ω–æ–≤–æ.")
        return
    # –ü—Ä–∏ —Ä—É—á–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å, –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    sess['post_text'] = message.text
    await state.clear()
    await message.answer("‚úÖ –¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.")
    await message.answer(sess['post_text'], reply_markup=get_main_keyboard())


@dp.callback_query(lambda c: c.data == 'add_media')
async def handle_add_media(callback: types.CallbackQuery, state: FSMContext):
    if not await guard_callback(callback):
        return
    await state.set_state(PostStates.waiting_for_media)
    await callback.message.edit_text(
        "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–∞—É–¥–∏–æ (–¥–æ 3 —Ñ–∞–π–ª–æ–≤). –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ù–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.",
        reply_markup=get_media_keyboard(),
    )


@dp.message(PostStates.waiting_for_media)
async def handle_media_upload(message: types.Message, state: FSMContext):
    if not await guard_message(message):
        return
    user_id = message.from_user.id
    sess = SESSIONS.get(user_id)
    if not sess:
        await state.clear()
        await message.answer("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–Ω–æ–≤–æ.")
        return

    media = sess.get('media', [])
    if message.photo:
        if len(media) >= MAX_IMAGES:
            await message.answer(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –º–µ–¥–∏–∞: {MAX_IMAGES}")
        else:
            media.append(f"photo:{message.photo[-1].file_id}")
    elif message.video:
        if len(media) >= MAX_IMAGES:
            await message.answer(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –º–µ–¥–∏–∞: {MAX_IMAGES}")
        else:
            media.append(f"video:{message.video.file_id}")
    elif message.audio:
        if len(media) >= MAX_IMAGES:
            await message.answer(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –º–µ–¥–∏–∞: {MAX_IMAGES}")
        else:
            media.append(f"audio:{message.audio.file_id}")
    elif message.voice:
        if len(media) >= MAX_IMAGES:
            await message.answer(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –º–µ–¥–∏–∞: {MAX_IMAGES}")
        else:
            media.append(f"voice:{message.voice.file_id}")
    else:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–∞—É–¥–∏–æ.")
        return

    sess['media'] = media[:MAX_IMAGES]
    await message.answer(
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {len(sess['media'])}/{MAX_IMAGES}. –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
        reply_markup=get_media_keyboard(),
    )


@dp.callback_query(lambda c: c.data == 'media_done')
async def handle_media_done(callback: types.CallbackQuery, state: FSMContext):
    if not await guard_callback(callback):
        return
    await state.clear()
    user_id = callback.from_user.id
    sess = SESSIONS.get(user_id)
    text = (sess or {}).get('post_text', '–¢–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.')
    await callback.message.edit_text(
        f"{text}\n\n–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –º–µ–¥–∏–∞: {len((sess or {}).get('media', []))}/{MAX_IMAGES}",
        reply_markup=get_main_keyboard(),
    )


@dp.callback_query(lambda c: c.data == 'publish')
async def handle_publish(callback: types.CallbackQuery):
    if not await guard_callback(callback):
        return
    user_id = callback.from_user.id
    sess = SESSIONS.get(user_id)
    if not sess or not sess.get('post_text'):
        await callback.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return
    if not CHANNEL_ID_RAW:
        await callback.answer("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω TELEGRAM_CHANNEL_ID –≤ .env", show_alert=True)
        return

    post_text = sess['post_text']
    media = list(sess.get('media', []))

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id
    chat_id: int | str
    try:
        chat_id = int(CHANNEL_ID_RAW)
    except Exception:
        chat_id = CHANNEL_ID_RAW  # @username

    try:
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è: –æ–¥–∏–Ω–æ—á–Ω–æ–µ –º–µ–¥–∏–∞ ‚Üí send_*; –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ ‚Üí –∞–ª—å–±–æ–º; –∞—É–¥–∏–æ/voice –æ—Ç–¥–µ–ª—å–Ω–æ
        if not media:
            await bot.send_message(chat_id=chat_id, text=post_text)
        else:
            photos_videos = [m for m in media if m.startswith(('photo:', 'video:'))]
            audios = [m for m in media if m.startswith('audio:')]
            voices = [m for m in media if m.startswith('voice:')]

            if len(photos_videos) <= 1 and not audios and not voices:
                m = photos_videos[0]
                if m.startswith('photo:'):
                    await bot.send_photo(chat_id=chat_id, photo=m.split(':',1)[1], caption=post_text)
                elif m.startswith('video:'):
                    await bot.send_video(chat_id=chat_id, video=m.split(':',1)[1], caption=post_text)
            else:
                media_group: list[types.InputMedia] = []
                for i, m in enumerate(photos_videos):
                    if m.startswith('photo:'):
                        mid = m.split(':',1)[1]
                        media_group.append(types.InputMediaPhoto(media=mid, caption=post_text if i==0 else None))
                    elif m.startswith('video:'):
                        mid = m.split(':',1)[1]
                        media_group.append(types.InputMediaVideo(media=mid, caption=post_text if i==0 else None))
                if media_group:
                    await bot.send_media_group(chat_id=chat_id, media=media_group)
                # –ê—É–¥–∏–æ/–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ (–±–µ–∑ –∞–ª—å–±–æ–º–∞)
                for a in audios:
                    await bot.send_audio(chat_id=chat_id, audio=a.split(':',1)[1])
                for v in voices:
                    await bot.send_voice(chat_id=chat_id, voice=v.split(':',1)[1])

        await callback.message.edit_text("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!", reply_markup=None)
        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        SESSIONS.pop(user_id, None)
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}", show_alert=True)


@dp.callback_query(lambda c: c.data == 'back_main')
async def handle_back(callback: types.CallbackQuery):
    if not await guard_callback(callback):
        return
    user_id = callback.from_user.id
    sess = SESSIONS.get(user_id)
    text = (sess or {}).get('post_text', '–¢–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.')
    await callback.message.edit_text(text, reply_markup=get_main_keyboard())


@dp.callback_query(lambda c: c.data == 'cancel')
async def handle_cancel(callback: types.CallbackQuery, state: FSMContext):
    if not await guard_callback(callback):
        return
    SESSIONS.pop(callback.from_user.id, None)
    await state.clear()
    await callback.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–Ω–æ–≤–æ.")


async def main():
    def signal_handler(signum, frame):
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
        sys.exit(0)

    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    await dp.start_polling(bot, skip_updates=True)


if __name__ == "__main__":
    asyncio.run(main())

